---
AWSTemplateFormatVersion: '2010-09-09'
Description: Cloud9 Custom Resource Template  (Please do not remove) May,29,2019
Metadata:
  LICENSE: Apache License, Version 2.0 
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Cloud9 Configuration
      Parameters:
      - EBSVolumeSize
      - EnvironmentId
      - IDEStackName
      - C9InstanceProfileName
      - C9InstanceProfileArn
    - Label:
        default: AWS Quick Start Configuration
      Parameters:
      - QSS3BucketName
      - QSS3KeyPrefix
      - OutputBucketName      
    ParameterLabels:
      EBSVolumeSize:
        default: EBS Volume Size
      IDEStackName:
        default: Cloud9 IDE StackName
      EnvironmentId:
        default: Cloud9 Instance Environment ID
      C9InstanceProfileName:
        default: Cloud9 Instance Profile Name  
      C9InstanceProfileArn:
        default: Cloud9 Instance Profile ARN
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      OutputBucketName:
        default: Output S3 Bucket Name        
Parameters:
  QSS3BucketName:
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    ConstraintDescription: >-
      Quick Start bucket name can include numbers, lowercase letters, uppercase
      letters, and hyphens (-). It cannot start or end with a hyphen (-).
    Default: aws-quickstart
    Description: >-
      S3 bucket name for the Quick Start assets. This string can include
      numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot
      start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: '^[0-9a-zA-Z-/]*$'
    ConstraintDescription: >-
      Quick Start key prefix can include numbers, lowercase letters, uppercase
      letters, hyphens (-), and forward slash (/).
    Default: quickstart-cloud9-ide/
    Description: >-
      S3 key prefix for the Quick Start assets. Quick Start key prefix can
      include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  IDEStackName:
    Description: C9 IDE StackName
    Type: String
  EBSVolumeSize:
    Description: The desired size (GB) of the EBS volume for your Cloud9 IDE.
    Type: Number
    Default: 100
  EnvironmentId:
    Description: The name of your Cloud9 instance.
    Type: String
  C9InstanceProfileName:
    Description: The name of the Cloud9 instance IAM profile name.
    Type: String
  C9InstanceProfileArn:
    Description: The ARN of the Cloud9 instance IAM profile.
    Type: String
  OutputBucketName:
    Description: 'OPTIONAL: Bucket Name where the zip file output should be placed,
      if left blank a bucket name will be automatically generated.'
    Type: String
    Default: ''    
Conditions:
  AutoGenOutputBucketName: !Not
    - !Equals
      - !Ref 'OutputBucketName'
      - ''    
Resources:
  RegistryBucket:
    Type: AWS::S3::Bucket
  LambdaZipsBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags: []
  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref 'LambdaZipsBucket'
      SourceBucket: !Ref 'QSS3BucketName'
      Prefix: !Ref 'QSS3KeyPrefix'
      Objects:
        - functions/packages/extend/lambda.zip
        - functions/packages/DeleteBucketContents/lambda.zip
  DeleteBucketContentsLambda:
    DependsOn: CopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt 'DeleteBucketContentsRole.Arn'
      Runtime: python2.7
      Timeout: 500
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub '${QSS3KeyPrefix}functions/packages/DeleteBucketContents/lambda.zip'
  DeleteRegistryBucketContents:
    Type: Custom::DeleteBucketContents
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'DeleteBucketContentsLambda.Arn'
      OutputBucket: !Ref 'RegistryBucket'
  DeleteTempBucketContents:
    Type: Custom::DeleteBucketContents
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'DeleteBucketContentsLambda.Arn'
      OutputBucket: !Ref 'OutputBucket'
  DeleteBucketContentsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: deletebucketcontents
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub 'arn:aws:s3:::${OutputBucket}'
                  - !Sub 'arn:aws:s3:::${OutputBucket}/*'
                  - !Sub 'arn:aws:s3:::${RegistryBucket}'
                  - !Sub 'arn:aws:s3:::${RegistryBucket}/*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*
  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub 'arn:aws:s3:::${LambdaZipsBucket}/${QSS3KeyPrefix}*'
  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt 'CopyZipsRole.Arn'
      Timeout: 500
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse

          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s'%dest_bucket)
                  print('key = %s' %key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)

          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)

          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)

          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()

              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)

  OutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !If
        - AutoGenOutputBucketName
        - !Ref 'OutputBucketName'
        - !Ref 'AWS::NoValue'
      VersioningConfiguration:
        Status: Enabled
      Tags: []                   
  C9InstanceFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - cloudformation:DescribeStacks
            - cloudformation:DescribeStackEvents
            - cloudformation:DescribeStackResource
            - cloudformation:DescribeStackResources
            - ec2:DescribeInstances
            - ec2:DescribeInstanceStatus
            - ec2:DescribeInstanceAttribute
            - ec2:DescribeVolumeStatus
            - ec2:DesctibeVolumeAttribute
            - ec2:DescribeTags
            - ec2:DescribeVolumes
            - ec2:DescribeVolumesModifications
            - ec2:AssociateIamInstanceProfile
            - ec2:ModifyVolume
            - ec2:ModifyVolumeAttributes
            - ec2:RebootInstances
            - ec2:ReplaceIamInstanceProfileAssociation
            - ec2:ReportInstanceStatus
            - iam:ListInstanceProfiles
            - iam:PassRole
            Resource: '*'
  C9InstanceFunction:
    DependsOn: CopyZipsFunction
    Type: AWS::Lambda::Function
    Properties:
      Handler: setenv.handler
      Runtime: python3.6
      Description: Cloud9 Instance Role Function
      MemorySize: 128
      Timeout: 500
      Role: !GetAtt 'C9InstanceFunctionRole.Arn'
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key:  !Sub '${QSS3KeyPrefix}functions/packages/extend/lambda.zip'
  C9InstanceCR:
    Type: Custom::C9InstanceFunction
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt 'C9InstanceFunction.Arn'
      EBSVolumeSize: !Ref 'EBSVolumeSize'
      StackName: !Ref 'IDEStackName'
      EnvironmentId: !Ref 'EnvironmentId'
      C9InstanceProfileName: !Ref 'C9InstanceProfileName'
      C9InstanceProfileArn: !Ref 'C9InstanceProfileArn'
